<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2434 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2434.xml">
<!ENTITY RFC2518 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2518.xml">
<!ENTITY RFC3688 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3688.xml">
<!ENTITY RFC3986 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3986.xml">
<!ENTITY RFC4589 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4589.xml">
<!ENTITY RFC4791 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4791.xml">
<!ENTITY RFC5545 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5545.xml">
<!ENTITY RFC5546 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5546.xml">
<!ENTITY RFC6047 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6047.xml">
<!ENTITY I-D.daboo-icalendar-extensions SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.daboo-icalendar-extensions.xml">
<!ENTITY W3C.REC-xml-20060816 SYSTEM "http://xml.resource.org/public/rfc/bibxml4/reference.W3C.REC-xml-20060816.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="5"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<rfc category="std" docName="draft-york-vpoll-00" ipr="trust200902">

  <front>
    <title abbrev="Event Publishing Extensions to Icalendar">Event Publishing Extensions to Icalendar</title>

    <!-- add 'role="editor"' below for the editors if appropriate -->

    <author initials="E." surname="York" fullname="Eric York" role="editor">
      <organization abbrev="Apple Inc.">
        Apple Inc.
      </organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <region>CA</region>
          <code>95014</code> 
          <country>USA</country>
        </postal>
        <email>eyork@apple.com</email>
        <uri>http://www.apple.com/</uri>
      </address>
    </author>

    <author initials="C." surname="Daboo" fullname="Cyrus Daboo" role="editor">
      <organization abbrev="Apple Inc.">
        Apple Inc.
      </organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <region>CA</region>
          <code>95014</code> 
          <country>USA</country>
        </postal>
        <email>cyrus@daboo.name</email>
        <uri>http://www.apple.com/</uri>
      </address>
    </author>

    <author initials="M." surname="Douglass" fullname="Michael Douglass" role="editor">
      <organization abbrev="RPI">Rensselaer Polytechnic Institute</organization>
      <address>
        <postal>
          <street>110 8th Street</street>
          <city>Troy</city>
          <region>NY</region>
          <code>12180</code>
          <country>USA</country>
        </postal>
        <email>douglm@rpi.edu</email>
        <uri>http://www.rpi.edu/</uri>
      </address>
    </author>

    <date month="November" year="2012"/>

    <area>Applications</area>

    <keyword>icalendar</keyword>

    <keyword>properties</keyword>

    <abstract>
      <t>
        This specification introduces a new iCalendar component which allows
        for consensus scheduling, that is voting on a number of alternative
        meeting or task alternatives.
      </t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>
        The currently existing approach to agreeing on meeting times using iTip
        <xref target='RFC5546'/> and/or iMip <xref target='RFC6047'/> have some 
        significant failings. There is no useful bargaining or suggestion 
        mechanism in iTip, only the ability for a potential attendee to accept 
        or refuse or to counter with a time of their own choosing. 
      </t>

      <t>
        Part of the problem is that for many potential attendees, their freebusy
        is not an accurate representation of their avalability. In fact, when
        trying to schedule conference calls across different organizations, 
        attendees may not be allowed to provide freebusy information or 
        availability as this may reveal something of the organizations internal
        activities. 
      </t>

      <t>
        A number of studies have shown that large amounts of time are spent 
        trying to come to an agreement - up to and beyond 20 working hours 
        per meeting. many organizers fall back on other approachessuch as 
        phone calls and email to determine a suitable time.
      </t>

      <t>
        Online services have appeared as a result and these allow participants 
        to vote on a number of alternatives without revealing or using freebusy
        or availability.
        When agreement is reached a conventional scheduling message may be sent
        to the attendees. This approach appears to reach consensus fairly rapidly. 
        Peer pressure may have some bearing on this as all voters are able to 
        see the current state of the voting and may adjust their own meeting 
        schedules to make themselves available for a popular choice. 
      </t>

      <t>
        The component and properties defined in this specification provide a
        standardized structure to this process and allow calendar clients and 
        servers and these web based services to interact.
      </t>

      <t>
        These structures also have uses beyond the relatively simple needs of most
        meeting organizers. The process of coming to consensus can also be viewed 
        as a bidding process. 
      </t>
    </section>

    <section anchor="conventions" 
             title='Conventions and Terms Used in This Document'>
      <t>
        The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
        NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
        "MAY", and "OPTIONAL" in this document are to be interpreted as
        described in <xref target='RFC2119'/>.
      </t>
      
      <t>
        Additionally we will use the following terms:
        
        <list style='hanging'>
          <t hangText="Consensus Scheduling:">
            The process whereby we come to some agreement on meeting or task
            alternatives and then book that meeting or task.
          </t>

          <t hangText="Active Vpoll:">
            A vpoll may have a DTSTART, DTEND and DURATION which may define the 
            start and end of the active voting period.
          </t>

          <t hangText="Voter:">
            A participant who votes on th ealternatives. A voter need not be
            an attendee of any of the alternatives presented.
          </t>
        </list>
      </t>
    </section>

    <section anchor="simple-consensus_scheduling" 
             title="Simple Consensus Scheduling">
      <t>
        This specification defines components and properties which can be used
        for simple consensus scheduling but also have the generality to handle
        more complex cases. To provide an easy (and for many - sufficient) 
        introduction to consensus scheduling and VPOLL we will outline the 
        flow of information for the simple case of voting on a number of 
        meeting alternatives which differ only in time. In addition the voters
        will all be potential attendees.
      </t>

      <t>
        This specification not only defines data structures but adds a new iTip
        method used when consensus has been reached. we will show how a VPOLL
        object is used to inform voters of the state of a simple vote on
        some alternatives.
      </t>

      <section anchor="vpoll_component_overview" 
             title="The VPOLL Component: An Overview">
        <t>
          The VPOLL component acts as a wrapper for a number of alternatives to
          be voted on together with some properties used to maintain the state
          of the voting. For our simple example the following VPOLL properties
          and sub-components are either required or appropriate: 
        
          <list style='hanging'>
            <t hangText="DTSTAMP:">
              The usual <xref target='RFC5545'/> property.
            </t>
              
            <t hangText="SEQUENCE:">
              The usual <xref target='RFC5545'/> property. See below for SEQUENCE
              behavior.
            </t>
  
            <t hangText="UID:">
              The usual <xref target='RFC5545'/> property.
            </t>
            
            <t hangText="ORGANIZER:">
              The usual <xref target='RFC5545'/> property. In general this need not 
              be an organizer of any of the alternatives. In this simple outline
              we assume it is the same.
            </t>
  
            <t hangText="SUMMARY:">
              The usual <xref target='RFC5545'/> property. This optional but
              recommended property provides the a short title to the poll.
            </t>
  
            <t hangText="DESCRIPTION:">
              The usual <xref target='RFC5545'/> property. This optional property
              provides more details.
            </t>
  
            <t hangText="DTEND:">
              The usual <xref target='RFC5545'/> property. This optional property
              provides a poll closing time and date after which the VPOLL is no
              longer active.
            </t>
  
            <t hangText="POLL-MODE:">
              A new property which defines how the votes are used to obtain a 
              result. For our use case it will take the value "BASIC" meaning 
              one event will be chosen from the alternatives. 
            </t>
  
            <t hangText="POLL-PROPERTIES:">
              A new property which defines which icalendar properties are being 
              voted on. For our use case it will take the value "DTSTART, LOCATION" 
              meaning only those properties are significant for voting.
              Other properties in the events may differ but are not considered
              significant for the voting process. 
            </t>
  
            <t hangText="VOTER:">
              A new property. There is one of these for each voter and it is 
              similar to the <xref target='RFC5545'/> ATTENDEE property. In the 
              VPOLL component it shows who takes part in the voting. 
            </t>
  
            <t hangText="VEVENT:">
              In our simple use case there will be multiple VEVENT sub-components
              defining the alternatives. Each will have  adifferent date and or time
              for the meeting. 
            </t>
          </list>
        </t>

        <t>
          Putting that together we can construct an example VPOLL with 3 voters
          and 3 alternative meetings:
          
          <figure>
            <artwork><![CDATA[
       BEGIN:VCALENDAR
       VERSION:2.0
       PRODID:-//Example//Example
       METHOD:REQUEST
       BEGIN:VPOLL
       POLL-MODE:BASIC
       POLL-PROPERTIES:DTSTART,LOCATION 
       ORGANIZER:mailto:mike@example.com
       UID:sched01-1234567890
       DTSTAMP:20120101T000000Z
       SUMMARY:What to do this week
       DTEND:20120101T000000Z
       VOTER:mailto:cyrus@exmaple.com
       VOTER:mailto:eric@example.com
       VEVENT.......(with a poll-item-id=1)
       VEVENT.......(with a poll-item-id=2)
       VEVENT.......(with a poll-item-id=3)
       END:VPOLL
       END:VCALENDAR
]]></artwork>
          </figure>
        </t>
        
        <t>
          As can be seen in the example above, there is an iTip METHOD property
          with the value REQUEST. The VPOLL object will be distributed to all
          the voters, either through iMipor through some VPOLL enabled service. 
        </t>
      </section>

      <section anchor="vpoll_subcomponent_overview" 
             title="The VPOLL Subcomponents: An Overview">
        <t>
          Within the VPOLL component we have the alternatives to vote on. In many
          respects these are standard <xref target='RFC5545'/> components. For 
          our simple use case they are all VEVENT components. In addition to the
          usual <xref target='RFC5545'/> properties some extra properties are 
          used for a VPOLL.
        
          <list style='hanging'>
            <t hangText="POLL-ITEM-ID:">
              This provides a unique reference to the sub-component within the
              VPOLL. It's value SHOULD be a small integer. 
            </t>
          
            <t hangText="VOTER:">
              The VOTER property within a VPOLL sub-component specifies the
              state of the vote for that voter. The RESPONSE parameter supplies 
              the current vote in the range 0 to 100. For many purposes this is 
              too fine grained and recommended values are defined for voting
              preferences of "NO", "MAYBE" and "YES" with an additional 
              "YES but not the preferred outcome". These properties will be 
              added to the sub-components as responses appear.
            </t>
          </list>
        </t>
      </section>
      
      <section anchor="vpoll_responses" 
             title="VPOLL responses">
        <t>
          Upon receipt of a VPOLL REQUEST the voter will reply with a VPOLL
          component containing their vote. In our simple case it will have the 
          following properties:
        
          <list style='hanging'>
            <t hangText="DTSTAMP:">
              The usual <xref target='RFC5545'/> property.
            </t>
              
            <t hangText="SEQUENCE:">
              The usual <xref target='RFC5545'/> property. See below for SEQUENCE
              behavior.
            </t>
  
            <t hangText="UID:">
              Same as the request.
            </t>
  
            <t hangText="ORGANIZER:">
              Same as the request.
            </t>
  
            <t hangText="SUMMARY:">
              Same as the request.
            </t>
  
            <t hangText="VOTER:">
              One only - the voter replying. 
            </t>
  
            <t hangText="POLL-ITEM-ID:">
              One per item being voted on. There does not need to be one for
              each sub-component but each REPLY will set the voting state for
              every sub-component.
            </t>
          </list>
        </t>
        
        <t>
          Note that a voter can send a number of REPLYs for each REQUEST sent
          by the organizer. Each REPLY completely replaces the voting record for
          that voter for all components being voted on. In our example, if Eric
          respondes and votre for items 1 and 2 and then responds again with a 
          vote for only item 3 the final outcome is one vote on item 3.
        </t>

        <t>
          Putting this together we can construct an example REPLY VPOLL from 
          cyrus:
          
          <figure>
            <artwork><![CDATA[
       BEGIN:VCALENDAR
       VERSION:2.0
       PRODID:-//Example//Example
       METHOD: REPLY
       BEGIN:VPOLL
       ORGANIZER:mailto:douglm@example.com
       VOTER:mailto:cyrus@example.com
       UID:sched01-1234567890
       DTSTAMP:20120101T010000Z
       SUMMARY:What to do this week
       POLL-ITEM-ID;RESPONSE=50;PUBLIC-COMMENT=Work on iTIP:1
       POLL-ITEM-ID;RESPONSE=100;COMMENT=Work on WebDAV:2
       POLL-ITEM-ID;RESPONSE=0:3
       END:VPOLL
       END:VCALENDAR
]]></artwork>
          </figure>
        </t>
      </section>
      
      <section anchor="vpoll_updates" 
             title="VPOLL updates">
        <t>
          When the organizer receives a response from one or more voters the
          current state of the poll is sent to all voters. The new iTip method
          POLLSTATUS is used. The VPOLL can contain a reduced set of properties
          but MUST contain DTSTAMP, SEQUNCE (if not 0), UID, ORGANIZER and VOTER.
        </t>

        <t>
          In additon, for out use case, it will contain skeleton VEVENT 
          sub-components with the POLL-ITEM-ID and VOTER properties. Clients 
          receiving this poll status SHOULD merge it in to their own copy to give
          the full current status
        </t>

        <t>
          An example:
          
          <figure>
            <artwork><![CDATA[
       BEGIN:VCALENDAR
       VERSION:2.0
       PRODID:-//Example//Example
       METHOD: POLLSTATUS
       BEGIN:VPOLL
       ORGANIZER:mailto:douglm@example.com
       VOTER:mailto:cyrus@example.com
       VOTER:mailto:eric@example.com
       UID:sched01-1234567890
       DTSTAMP:20120101T020000Z
       SEQUENCE:0
       SUMMARY:What to do this week
       BEGIN:VEVENT
       POLL-ITEM-ID: 1
       VOTER;RESPONSE=50;COMMENT=Work on iTIP:
        mailto:cyrus@exmaple.com
       VOTER;RESPONSE=100:mailto:eric@example.com
       END:VEVENT
       BEGIN:VEVENT
       POLL-ITEM-ID: 2
       VOTER;RESPONSE=100;COMMENT=Work on WebDAV:
        mailto:cyrus@exmaple.com
       VOTER;RESPONSE=100:mailto:eric@example.com
       END:VEVENT
       BEGIN:VEVENT
       POLL-ITEM-ID: 3
       VOTER;RESPONSE=0:mailto:cyrus@example.com
       VOTER;RESPONSE=0:mailto:eric@example.com
       END:VEVENT
       END:VPOLL
       END:VCALENDAR
]]></artwork>
          </figure>
        </t>
      </section>
      
      <section anchor="vpoll_completion" 
             title="VPOLL Completion">
        <t>
          After a number of REPLY messages have been received the poll will be 
          considered complete. If there is a DTEND on the poll the system may
          automatically close the poll, or the organizer may, at any time, 
          consider the poll complete.
        </t>
        
        <t>
          The poll is completed by sending a final iTip message with the new
          CONFIRM method. In this case the VPOLL component contains ...
        </t>

        <t>
          The VPOLL conformation example:
          
          <figure>
            <artwork><![CDATA[
       BEGIN:VCALENDAR
       VERSION:2.0
       PRODID:-//Example//Example
       METHOD: CONFIRM
       BEGIN:VPOLL
       ORGANIZER:mailto:douglm@example.com 
       UID:sched01-1234567890
       DTSTAMP:20120101T030000Z
       SEQUENCE:0
       SUMMARY:What to do this week
       BEGIN:VEVENT
       UID:123
       ......
       END:VEVENT
]]></artwork>
          </figure>
        </t>
      </section>
    </section>
               
    <section anchor="icalendar_extensions"
             title="iCalendar Extensions">
      <section anchor="new_property_parameters"
               title="New Property Parameters">
        <section anchor="parameter_public_comment"
                 title="Public-Comment">
          <t>
            <list style='hanging'>
              <t hangText="Parameter name:">
                PUBLIC-COMMENT
              </t>
    
              <t hangText="Purpose:">
                To allow voters to provide a public comment in their reponse.
              </t>
    
              <t hangText="Format Definition:">
                <figure>
                  <preamble>
                    This parameter is defined by the following notation:
                  </preamble>
    
                  <artwork type="abnf">
   public-comment-param = "PUBLIC-COMMENT=" DQUOTE text DQUOTE
                  </artwork>
                </figure>
              </t>
    
              <t hangText="Description:">
                This parameter can be specified on the POLL-ITEM-ID property to 
                allow a voter to add some commentary visible to all voters. 
              </t>
            </list>
          </t>
        </section>
         
        <section anchor="parameter_response"
                 title="Response">
          <t>
            <list style='hanging'>
              <t hangText="Parameter name:">
                RESPONSE
              </t>
    
              <t hangText="Purpose:">
                To specify a response vote.
              </t>
    
              <t hangText="Format Definition:">
                <figure>
                  <preamble>
                    This parameter is defined by the following notation:
                  </preamble>
    
                  <artwork type="abnf">
    response-param = "RESPONSE=" integer
          ; integer value 0..100
                  </artwork>
                </figure>
              </t>
    
              <t hangText="Description:">
                This parameter can be specified on the POLL-ITEM-ID property to 
                provide the value of the voters response. This parameter allows
                for fine grained responses which are appropriate to some 
                applications. For the case of individuals voting for a choice of
                events client applications SHOULD conform to the following
                convention:
                <list style='symbols'>
                  <t>
                    0 - 39 A "NO vote".
                  </t>
                  <t>
                    40 - 79 A "MAYBE" vote
                  </t>
                  <t>
                    80 - 89 A "YES - but not preferred vote"
                  </t>
                  <t>
                    90-100 A "YES" vote.
                  </t>
                </list>
              </t>
            </list>
          </t>
        </section>
  
        <section anchor="parameter_stayinformed"
                 title="Stay-Informed">
          <t>
            <list style='hanging'>
              <t hangText="Parameter name:">
                STAY-INFORMED
              </t>
    
              <t hangText="Purpose:">
                To specify the voter also wants to be added as an ATTENDEE when 
                the poll is confirmed.
              </t>
    
              <t hangText="Format Definition:">
                <figure>
                  <preamble>
                    This parameter is defined by the following notation:
                  </preamble>
    
                  <artwork type="abnf">
    stayinformedparam = "STAY-INFORMED" "=" boolean
                  </artwork>
                </figure>
              </t>
    
              <t hangText="Description:">
                This parameter MAY be specified on VOTER and, if the value is TRUE,
                indicates the voter wishes to be added to the final choice as a 
                non participant.
              </t>
            </list>
          </t>
        </section>
      </section>
  
      <section anchor="new_properties"
               title="New Properties">
        <section anchor="accept_response"
                 title="Accept-Response">
          <t>
            <list style='hanging'>
              <t hangText="Property name:">
                ACCEPT-RESPONSE
              </t>
    
              <t hangText="Purpose:">
                This property is used in VPOLL to indicate the types of component
                that may be supplied in a response.
              </t>
    
              <t hangText="Property Parameters:">
                Non-standard or iana parameters can be specified on this property.
              </t>
    
              <t hangText="Conformance:">
                This property MAY be specified in a VPOLL component.
              </t>
    
              <t hangText="Description:">
                When used in a VPOLL this property indicates what allowable 
                component types may be returned in a reply. Typically this would
                allow a voter to respond with the freebusy or availability rather
                than choosing one of the presented alternatives
              </t>
    
              <t>
                If this property is not present voters are only allowed to 
                respond with the same component type as in the request.
              </t>
    
              <t hangText="Format Definition:">
                <figure>
                  <preamble>
                    This property is defined by the following notation:
                  </preamble>
    
                  <artwork type="abnf">
  acceptresponse = "ACCEPT-RESPONSE" "="    
                       acceptresponseparams ":"    
                       iana-token ("," iana-token) CRLF
                       
  acceptresponseparams = *(";" other-param)
                  </artwork>
                </figure>
              </t>
            </list>
          </t>
        </section>
        
        <section anchor="poll_item_id"
                 title="Poll-Item-Id">
          <t>
            <list style='hanging'>
              <t hangText="Property name:">
                POLL-ITEM-ID
              </t>
    
              <t hangText="Purpose:">
                This property is used in VPOLL to indicate recipients of the poll
                and in VPOLL sub-components to give the voters response.
              </t>
    
              <t hangText="Value type:">
                The value type for this property is param-value.
              </t>
    
              <t hangText="Property Parameters:">
                Non-standard, response, public-comment or stayinformed parameters 
                can be specified on this property.
              </t>
    
              <t hangText="Conformance:">
                This property MAY be specified in a VPOLL component or its 
                sub-components.
              </t>
    
              <t hangText="Description:">
                In a METHOD:REQUEST each child component MUST have a POLL-ITEM-ID 
                property. Each set of components with the same POLL-ITEM-ID value 
                represents one overall set of items to be voted on.
              </t>
              
              <t>
                In a METHOD:REPLY there is a single VPOLL component which MUST have:
                either one or more POLL-ITEM-ID properties with a RESPONSE param 
                matching that from a REQUEST or a VFREEBUSY or VAVAILABILITY child 
                component showing overall busy/available time.
              </t>
    
              <t hangText="Format Definition:">
                <figure>
                  <preamble>
                    This property is defined by the following notation:
                  </preamble>
    
                  <artwork type="abnf">
          pollitemid = "POLL-ITEM-ID" pollitemdparams ":" 
                     param-value CRLF
          
          pollitemidparams = *(
                      (";" responseparam) /
                      (";" stayinformedparam) /
                      (";" public-comment-param) /
                      (";" other-param)
               )
              
                  </artwork>
                </figure>
              </t>
            </list>
          </t>
        </section>
        
        <section anchor="poll_mode"
                 title="Poll-Mode">
          <t>
            <list style='hanging'>
              <t hangText="Property name:">
                POLL-MODE
              </t>
    
              <t hangText="Purpose:">
                This property is used in VPOLL to indicate what voting mode is
                to be applied.
              </t>
    
              <t hangText="Property Parameters:">
                Non-standard or iana parameters 
                can be specified on this property.
              </t>
    
              <t hangText="Conformance:">
                This property MAY be specified in a VPOLL component or its 
                sub-components.
              </t>
    
              <t hangText="Description:">
                The poll mode defines how the votes are applied to obtain a result.
                BASIC mode, the default, means that the voters are selecting one 
                component (or group of components) with a given POLL=ITEM-ID.
              </t>
              
              <t>
                Other polling modes may be defined in updates to this specification.
                These may allow for such modes as ranking.
              </t>
    
              <t hangText="Format Definition:">
                <figure>
                  <preamble>
                    This property is defined by the following notation:
                  </preamble>
    
                  <artwork type="abnf">
          pollmode = "POLL-MODE" pollmodeparams ":" 
              ("BASIC" / iana-token / other-token) CRLF
          
          pollmodeparams = *(";" other-param)
              
                  </artwork>
                </figure>
              </t>
    
              <t hangText="Note">
                This property MUST be present in an iTip request. If the client
                does not understand the poll mode it should use the LINk [URL?]
                proeprty to get the web-based view of the poll.
              </t>
            </list>
          </t>
        </section>
         
        <section anchor="poll_properties"
                 title="Poll-properties">
          <t>
            <list style='hanging'>
              <t hangText="Property name:">
                POLL-PROPERTIES
              </t>
    
              <t hangText="Purpose:">
                This property is used in VPOLL to define which icalendar properties 
                are being voted on.
              </t>
    
              <t hangText="Property Parameters:">
                Non-standard or iana parameters can be specified on this property.
              </t>
    
              <t hangText="Conformance:">
                This property MAY be specified in a VPOLL component.
              </t>
    
              <t hangText="Description:">
                This property defines which icalendar properties are significant
                in the voting process. It may not be claer to voters which 
                properties are varying in a significant manner. Clients may
                use this property to highlight those listed properties.
              </t>
    
              <t hangText="Format Definition:">
                <figure>
                  <preamble>
                    This property is defined by the following notation:
                  </preamble>
    
                  <artwork type="abnf">
          pollproperties = "POLL-PROPERTIES" pollpropparams ":" 
              text *("," text) CRLF
          
          pollpropparams = *(";" other-param)
              
                  </artwork>
                </figure>
              </t>
            </list>
          </t>
        </section>
        
        <section anchor="voter"
                 title="Voter">
          <t>
            <list style='hanging'>
              <t hangText="Property name:">
                VOTER
              </t>
    
              <t hangText="Purpose:">
                This property is used in VPOLL to indicate recipients of the poll
                and in VPOLL sub-components to give the voters response.
              </t>
    
              <t hangText="Value type:">
                The value type for this property is cal-address.
              </t>
    
              <t hangText="Property Parameters:">
                Non-standard, cutype, member, role, rsvp, delto, delfrom, sentby,
                cn, dir, lang, response or stayinformed parameters 
                can be specified on this property.
              </t>
    
              <t hangText="Conformance:">
                This property MAY be specified in a VPOLL component or its 
                sub-components.
              </t>
    
              <t hangText="Description:">
                When used in a VPOLL this property indicates who the poll is sent 
                to. When used in sub-components of VPOLL this property indicate 
                the response of each voter as known at that time.
              </t>
    
              <t hangText="Format Definition:">
                <figure>
                  <preamble>
                    This property is defined by the following notation:
                  </preamble>
    
                  <artwork type="abnf">
    voter = "VOTER" voterparams ":" cal-address CRLF
  
    voterparam   = *(
                    ;
                    ; The following are OPTIONAL,
                    ; but MUST NOT occur more than once.
                    ;
                    (";" cutypeparam) / (";" memberparam) /
                    (";" roleparam) /
                    (";" rsvpparam) / (";" deltoparam) /
                    (";" delfromparam) / (";" sentbyparam) /
                    (";" cnparam) / (";" dirparam) /
                    (";" languageparam) /
                    (";" responseparam) / 
                    (";" stayinformedparam) /
                    ;
                    ; The following is OPTIONAL,
                    ; and MAY occur more than once.
                    ;
                    (";" other-param)
                    ;
              )
              
                  </artwork>
                </figure>
              </t>
    
              <t hangText="Note">
                RSVP=TRUE MAY used by the organizer to force the voter to reset 
                their state and re-vote.
              </t>
            </list>
          </t>
        </section>
      </section>
  
      <section anchor="new_vpoll_component"
               title="VPOLL Component">
      
        <t>
          <list style='hanging'>
            <t hangText="Component name:">
              VPOLL
            </t>
  
            <t hangText="Purpose:">
              This component provides a mechanism by which voters can vote on
              provided choices.
            </t>
  
            <t hangText="Format Definition:">
              <figure>
                <preamble>
                  This property is defined by the following notation:
                </preamble>
  
                <artwork type="abnf">
  pollc    = "BEGIN" ":" "VPOLL" CRLF
               pollprop 
               *eventc *todoc *journalc *freebusyc 
               *availabilityc *alarmc *iana-comp *x-comp
               "END" ":" "VPOLL" CRLF
               
  pollprop = *(
             ;
             ; The following are REQUIRED,
             ; but MUST NOT occur more than once.
             ;
             dtstamp / uid / organizer /
             ;
             ; The following are OPTIONAL,
             ; but MUST NOT occur more than once.
             ;
             acceptresponse / class / created / description /
             dtstart / last-mod / pollmode / priority /
             seq / status / summary /
             url /
             ; Either 'dtend' or 'duration' MAY appear in
             ; a 'pollprop', but 'dtend' and 'duration'
             ; MUST NOT occur in the same 'pollprop'.
             ; 'duration' MUST only occur when 'dtstart'
             ; is present
             ;
             dtend / duration /
             ;
             ; The following are OPTIONAL,
             ; and MAY occur more than once.
             ;
             attach / categories / comment /
             contact / link / pollitemid / pollwinner / 
             rstatus / related /
             resources / voter / x-prop / iana-prop
             ;
             )
               </artwork>
              </figure>
            </t>
  
            <t hangText="Description:">
              This component provides a mechanism by which voters can vote on
              provided choices. The outcome depends upon the POLL-MODE in effect.
            </t>
  
            <t>
              VOTER in VPOLL requests refers to each person who will be voting - 
              RSVP=TRUE is used by the organizer to force the voter to reset 
              their state and re-vote
            </t>
  
            <t>
              If specified, the "DTSTART" property defines the start or 
              opening of the poll active period. If absent the poll is presumed 
              to have started when created. 
            </t>
  
            <t>
              If "DTSTART"is present "DURATION" MAY be specified and indicates
              the duration, and hence the ending, of the poll. The value of the
              property MUST be a positive duration.
            </t>
  
            <t>
              "DTEND" MAY be specified with or without "DTSTART" and indicates
              the ending of the poll. If DTEND is specified it MUST be later than
              the DTSTART or CREATED property.
            </t>
  
            <t>
              If one or more VALARM components are included in the VPOLL they
              are not componets to be voted on adn MUST NOT contain a POLL-ITEM-ID
              property. VALARM sub-components may be used to provide warnings to
              the user when polls are due to start or end.
            </t>
          </list>
        </t>
      </section>      
    </section>
               
    <section anchor="itip_extensions"
             title="iTip Extensions">
      <t>
        This specification introduces two new METHOD values..
      </t>
      
      <t>
        This section to be completed: Current notes are: 
        <list style='symbols'>
          <t>
            In a METHOD:REQUEST each child component MUST have a POLL-ITEM-ID property. 
    Each set of components with the same POLL-ITEM-ID value represents one overall 
    set of items to be voted on.
          </t>
          
          <t>
            In a METHOD:REPLY there is a single VPOLL component which MUST have:
    either one or more POLL-ITEM-ID properties with a RESPONSE param matching 
    that from a REQUEST
    or a VFREEBUSY or VAVAILABILITY child component showing overall busy/available time.
          </t>
          
          <t>
            In a METHOD:REPLY the VPOLL MUST have one VOTER only
          </t>
          
          <t>
            In a METHOD:CONFIRM the VPOLL MUST have all the components from the chosen POLL-ITEM-ID set
          </t>
          
          <t>
            In a METHOD:CANCEL there is a single VPOLL component with UID matching that of the poll being cancelled.
          </t>
          
          <t>
            No ADD, COUNTER or DECLINE-COUNTER behavior defined
          </t>
          
          <t>
            In a METHOD:REFRESH organizer returns a METHOD:REQUEST with the current full state, or a METHOD:CANCEL, or a METHOD:CONFIRM, or an error if no matching poll is found.
          </t>
        </list>
      </t>
    </section>
    
    <section anchor="caldav_extensions"
             title="CalDAV Extensions">
      <t>
        This specification extends <xref target='RFC4791'/> in that it defines
        a new component and new iCalendar properties to be supported and requires extra 
        definitions related to time-ranges and reports.
      </t>
      
    <section anchor="calendar_collection_properties"
             title="Calendar Collection Properties">
      <t>
       This section defines new CalDAV properties for calendar collections.
      </t>
      
      <section anchor="caldav_vpoll_supported_component_set"
               title="CALDAV:vpoll-supported-component-set">
        <t>
          <list style='hanging'>
            <t hangText="Name:">
              vpoll-supported-component-set
            </t>

            <t hangText="Namespace:">urn:ietf:params:xml:ns:caldav</t>

            <t hangText="Purpose:">
              Specifies the calendar component types (e.g., VEVENT,
              VTODO, etc.) that may be included in a VPOLL component.
            </t>

            <t hangText="Conformance:">
              This property MAY be defined on any calendar
              collection.  If defined, it MUST be protected and SHOULD NOT be
              returned by a PROPFIND DAV:allprop request (as defined in Section
              12.14.1 of <xref target='RFC2518'/>).
            </t>

            <t hangText="Description:">
              The CALDAV:vpoll-supported-component-set property is
              used to specify restrictions on the calendar component types that
              VPOLL components may contain in a calendar collection.
              Any attempt by the client to store VPOLL components with
              component types not listed in this property, if it exists, MUST
              result in an error, with the CALDAV:vpoll-supported-component
              precondition <xref target="additional_preconditions"/> 
              being violated.  Since this
              property is protected, it cannot be changed by clients using a
              PROPPATCH request.  However, clients can initialize the value of
              this property when creating a new calendar collection with
              MKCALENDAR.  In the absence of
              this property, the server MUST accept all component types, and the
              client can assume that all component types are accepted.
            </t>

            <t hangText="Definition:">
              <figure>
                <artwork><![CDATA[
         <!ELEMENT vpoll-supported-component-set (comp+)>
  
]]></artwork>
              </figure>
            </t>

            <t hangText="Example:">
              <figure>
                <artwork><![CDATA[
         <C:vpoll-supported-component-set
             xmlns:C="urn:ietf:params:xml:ns:caldav">
           <C:comp name="VEVENT"/>
           <C:comp name="VTODO"/>
         </C:vpoll-supported-component-set>
  
]]></artwork>
              </figure>
            </t>
          </list>
        </t>
      </section>
      
      <section anchor="caldav_vpoll_max_items"
               title="CALDAV:vpoll-max-items">
        <t>
          <list style='hanging'>
            <t hangText="Name:">
              vpoll-max-items
            </t>

            <t hangText="Namespace:">urn:ietf:params:xml:ns:caldav</t>

            <t hangText="Purpose:">
              Provides a numeric value indicating the maximum number of
              items that may be contained in any instance of a VPOLL calendar 
              object resource stored in the calendar collection.
            </t>

            <t hangText="Conformance:">
              This property MAY be defined on any calendar
              collection.  If defined, it MUST be protected and SHOULD NOT be
              returned by a PROPFIND DAV:allprop request (as defined in Section
              12.14.1 of <xref target='RFC2518'/>).
            </t>

            <t hangText="Description:">
              The CALDAV:vpoll-max-items is used to
              specify a numeric value that indicates the maximum number of
              iCalendar components in any one instance of a VPOLL calendar
              object resource stored in a calendar collection.  Any attempt to
              store a calendar object resource with more components per
              instance than this value MUST result in an error, with the CALDAV:
              vpoll-max-items precondition <xref target="additional_preconditions"/> being
              violated.  In the absence of this property, the client can assume
              that the server can handle any number of items in a VPOLL
              calendar component.
            </t>

            <t hangText="Definition:">
              <figure>
                <artwork><![CDATA[
         <!ELEMENT vpoll-max-items (#PCDATA)>
         PCDATA value: a numeric value (integer greater than zero)
  
]]></artwork>
              </figure>
            </t>

            <t hangText="Example:">
              <figure>
                <artwork><![CDATA[
         <C:vpoll-max-items
              xmlns:C="urn:ietf:params:xml:ns:caldav"
         >25</C:vpoll-max-items>
  
]]></artwork>
              </figure>
            </t>
          </list>
        </t>
      </section>
      
      <section anchor="caldav_vpoll_max_active"
               title="CALDAV:vpoll-max-active">
        <t>
          <list style='hanging'>
            <t hangText="Name:">
              vpoll-max-active
            </t>

            <t hangText="Namespace:">urn:ietf:params:xml:ns:caldav</t>

            <t hangText="Purpose:">
              Provides a numeric value indicating the maximum number of
              active vpolls at any one time.
            </t>

            <t hangText="Conformance:">
              This property MAY be defined on any calendar
              collection.  If defined, it MUST be protected and SHOULD NOT be
              returned by a PROPFIND DAV:allprop request (as defined in Section
              12.14.1 of <xref target='RFC2518'/>).
            </t>

            <t hangText="Description:">
              The CALDAV:vpoll-max-active is used to
              specify a numeric value that indicates the maximum number of
              active VPOLLs at any one time.  Any attempt to store a new active
              VPOLL calendar object resource which results in exceeding this limit
              MUST result in an error, with the CALDAV:
              vpoll-max-active precondition <xref target="additional_preconditions"/> being
              violated.  In the absence of this property, the client can assume
              that the server can handle any number of active VPOLLs.
            </t>

            <t hangText="Definition:">
              <figure>
                <artwork><![CDATA[
         <!ELEMENT vpoll-max-active (#PCDATA)>
         PCDATA value: a numeric value (integer greater than zero)
  
]]></artwork>
              </figure>
            </t>

            <t hangText="Example:">
              <figure>
                <artwork><![CDATA[
         <C:vpoll-max-active
              xmlns:C="urn:ietf:params:xml:ns:caldav"
         >25</C:vpoll-max-active>
  
]]></artwork>
              </figure>
            </t>
          </list>
        </t>
      </section>
      
      <section anchor="caldav_vpoll_max_voters"
               title="CALDAV:vpoll-max-voters">
        <t>
          <list style='hanging'>
            <t hangText="Name:">
              vpoll-max-voters
            </t>

            <t hangText="Namespace:">urn:ietf:params:xml:ns:caldav</t>

            <t hangText="Purpose:">
              Provides a numeric value indicating the maximum number of
              voters for any instance of a VPOLL calendar 
              object resource stored in the calendar collection.
            </t>

            <t hangText="Conformance:">
              This property MAY be defined on any calendar
              collection.  If defined, it MUST be protected and SHOULD NOT be
              returned by a PROPFIND DAV:allprop request (as defined in Section
              12.14.1 of <xref target='RFC2518'/>).
            </t>

            <t hangText="Description:">
              The CALDAV:vpoll-max-voters is used to
              specify a numeric value that indicates the maximum number of
              VOTER properties for any one instance of a VPOLL calendar
              object resource stored in a calendar collection.  Any attempt to
              store a calendar object resource with more VOTER properties per
              instance than this value MUST result in an error, with the CALDAV:
              vpoll-max-voters precondition <xref target="additional_preconditions"/> being
              violated.  In the absence of this property, the client can assume
              that the server can handle any number of voters in a VPOLL
              calendar component.
            </t>

            <t hangText="Definition:">
              <figure>
                <artwork><![CDATA[
         <!ELEMENT vpoll-max-voters (#PCDATA)>
         PCDATA value: a numeric value (integer greater than zero)
  
]]></artwork>
              </figure>
            </t>

            <t hangText="Example:">
              <figure>
                <artwork><![CDATA[
         <C:vpoll-max-voters
              xmlns:C="urn:ietf:params:xml:ns:caldav"
         >25</C:vpoll-max-voters>
  
]]></artwork>
              </figure>
            </t>
          </list>
        </t>
      </section>

      <section anchor="caldav_even_more_properties"
               title="CalDAV:even-more-properties">
        <t>
          <list style='numbers'>
<t>    List of poll modes
</t><t>    Combination of components -        
For a caldav server, a capability dav property similar to support component 
sets which specifies what sets of icalendar components are supports for voting, 
for example, only support VEVENTs.            
</t><t>    Limits:Size of individual resources
</t><t>    Limits:Size of total vpoll
</t><t>    Limits:Max voting period 
</t><t>    Limits:itip/~itip
</t><t>    Limits:remote attendee/voter capable
</t><t>    poll options - e.g "vpoll-basic" 
        </t>
        </list>
        </t>
      </section>
    </section>
    
    <section anchor="additional_preconditions"
             title="Additional Preconditions for PUT, COPY, and MOVE">
      <t>
        This specification creates additional Preconditions for PUT, COPY,
        and MOVE methods.  These preconditions apply when a PUT operation of
        a VPOLL calendar object resource into a calendar collection occurs, or when
        a COPY or MOVE operation of a calendar object resource into a
        calendar collection occurs, or when a COPY or MOVE operation occurs
        on a calendar collection.
      </t>

      <t>    
        The new preconditions are:
        <list style='hanging'>
          <t hangText="(CALDAV:vpoll-supported-component):">
            The VPOLL resource submitted in the PUT request, or targeted by a 
            COPY or MOVE request, MUST contain a type of calendar component 
            that is supported in the targeted calendar collection;
          </t>

          <t hangText="(CALDAV:vpoll-max-items):">
            The VPOLL resource submitted in the PUT request, or targeted by a 
            COPY or MOVE request, MUST have a number of sub-components
            (excluding VTIMEZONE) 
            less than or equal to the value of the CALDAV:vpoll-max-items
            property value <xref target="caldav_vpoll_max_items"/> on the 
            calendar collection where  the resource will be stored;;
          </t>

          <t hangText="(CALDAV:vpoll-max-active):">
            The PUT request, or COPY or MOVE request, MUST not result in the
            number of active VPOLLsbeing greater than the value of the 
            CALDAV:vpoll-max-active
            property value <xref target="caldav_vpoll_max_active"/> on the 
            calendar collection where  the resource will be stored;;
          </t>

          <t hangText="(CALDAV:vpoll-max-voters):">
            The VPOLL resource submitted in the PUT request, or targeted by a 
            COPY or MOVE request, MUST have a number of VOTER properties 
            less than or equal to the value of the CALDAV:vpoll-max-voters
            property value <xref target="caldav_vpoll_max_voters"/> on the 
            calendar collection where  the resource will be stored;;
          </t>
        </list>
      </t>
    </section>

    <section anchor="caldav_calendar_query_report"
             title="CalDAV:calendar-query Report">
      <t>
        This allows the retrieval of VPOLLs and their included components. 
        The query specification allows queries to be directed at the contained
        sub-components
      </t>
        
      <section anchor="example_partial_retrieval_of_vpoll"
               title="Example: Partial Retrieval of VPOLL">
        <t>
          In this example, the client requests the server to return specific
          components and properties of the VPOLL components that overlap the
          time range from December 4, 2012, at 00:00:00 A.M. UTC to December 5,
          2012, at 00:00:00 A.M. UTC.  In addition, the DAV:getetag property is
          also requested and returned as part of the response. 
          Note that due to the CALDAV:
          calendar-data element restrictions, the DTSTAMP property in VPOLL
          components has not been returned, and the only property returned in
          the VCALENDAR object is VERSION.
          
          <figure>
            <artwork><![CDATA[
   >> Request <<

   REPORT /cyrus/work/ HTTP/1.1
   Host: cal.example.com
   Depth: 1
   Content-Type: application/xml; charset="utf-8"
   Content-Length: xxxx

   <?xml version="1.0" encoding="utf-8" ?>
   <C:calendar-query xmlns:D="DAV:"
                 xmlns:C="urn:ietf:params:xml:ns:caldav">
     <D:prop>
       <D:getetag/>
       <C:calendar-data>
         <C:comp name="VCALENDAR">
           <C:prop name="VERSION"/>
           <C:comp name="VPOLL">
             <C:prop name="SUMMARY"/>
             <C:prop name="UID"/>
             <C:prop name="DTSTART"/>
             <C:prop name="DTEND"/>
             <C:prop name="DURATION"/>
           </C:comp>
         </C:comp>
       </C:calendar-data>
     </D:prop>
     <C:filter>
       <C:comp-filter name="VCALENDAR">
         <C:comp-filter name="VPOLL">
           <C:time-range start="20121204T000000Z"
                         end="20121205T000000Z"/>
         </C:comp-filter>
       </C:comp-filter>
     </C:filter>
   </C:calendar-query>

   >> Response <<

   HTTP/1.1 207 Multi-Status
   Date: Sat, 11 Nov 2012 09:32:12 GMT
   Content-Type: application/xml; charset="utf-8"
   Content-Length: xxxx
   
   <?xml version="1.0" encoding="utf-8" ?>
   <D:multistatus xmlns:D="DAV:"
              xmlns:C="urn:ietf:params:xml:ns:caldav">
     <D:response>
       <D:href>http://cal.example.com/cyrus/work/poll2.ics</D:href>
       <D:propstat>
         <D:prop>
           <D:getetag>"fffff-abcd2"</D:getetag>
           <C:calendar-data>BEGIN:VCALENDAR
   VERSION:2.0
   BEGIN:VEVENT
   DTSTART;TZID=US/Eastern:20121202T120000
   DURATION:PT4D
   SUMMARY:Poll #2
   UID:00959BC664CA650E933C892C@example.com
   END:VPOLL
   END:VCALENDAR
   </C:calendar-data>
         </D:prop>
         <D:status>HTTP/1.1 200 OK</D:status>
       </D:propstat>
     </D:response>
     <D:response>
       <D:href>http://cal.example.com/cyrus/work/poll3.ics</D:href>
       <D:propstat>
         <D:prop>
           <D:getetag>"fffff-abcd3"</D:getetag>
           <C:calendar-data>BEGIN:VCALENDAR
   VERSION:2.0
   PRODID:-//Example Corp.//CalDAV Client//EN
   BEGIN:VPOLL
   DTSTART;TZID=US/Eastern:20121204T100000
   DURATION:PT4D
   SUMMARY:Poll #3
   UID:DC6C50A017428C5216A2F1CD@example.com
   END:VPOLL
   END:VCALENDAR
   </C:calendar-data>
         </D:prop>
         <D:status>HTTP/1.1 200 OK</D:status>
       </D:propstat>
     </D:response>
   </D:multistatus>

]]></artwork>
          </figure>
        </t>
      </section>
        
      <section anchor="example_retrieval_of_vpolls_by_sub_component_time_range"
               title="Example: Retrieval of Vpolls by sub-component Time Range">
        <t>
         In this example, the client requests the server to return the VPOLL
         components that have an alarm trigger scheduled in the specified time
         range.      
          <figure>
            <artwork><![CDATA[
   >> Request <<

   REPORT /cyrus/work/ HTTP/1.1
   Host: cal.example.com
   Depth: 1
   Content-Type: application/xml; charset="utf-8"
   Content-Length: xxxx

   <?xml version="1.0" encoding="utf-8" ?>
   <C:calendar-query xmlns:C="urn:ietf:params:xml:ns:caldav">
     <D:prop xmlns:D="DAV:">
       <D:getetag/>
       <C:calendar-data/>
     </D:prop>
     <C:filter>
       <C:comp-filter name="VCALENDAR">
         <C:comp-filter name="VPOLL">
           <C:comp-filter name="*">
             <C:time-range start="20121206T100000Z"
                             end="20121207T100000Z"/>
           </C:comp-filter>
         </C:comp-filter>
       </C:comp-filter>
     </C:filter>
   </C:calendar-query>

   >> Response <<

   HTTP/1.1 207 Multi-Status
   Date: Sat, 11 Nov 2012 09:32:12 GMT
   Content-Type: application/xml; charset="utf-8"
   Content-Length: xxxx

   <?xml version="1.0" encoding="utf-8" ?>
   <D:multistatus xmlns:D="DAV:"
                  xmlns:C="urn:ietf:params:xml:ns:caldav">
     <D:response>
       <D:href>http://cal.example.com/cyrus/work/poll4.ics</D:href>
       <D:propstat>
         <D:prop>
           <D:getetag>"fffff-abcd4"</D:getetag>
           <C:calendar-data>BEGIN:VCALENDAR
   VERSION:2.0
   PRODID:-//Example Corp.//CalDAV Client//EN
   BEGIN:VPOLL
   DTSTAMP:20121205T235300Z
   DTEND;TZID=US/Eastern:20121206T120000
   LAST-MODIFIED:20121205T235308Z
   SEQUENCE:1
   SUMMARY:Poll #4
   UID:E10BA47467C5C69BB74E8720@example.com
   BEGIN:VEVENT
   ...
   END:VEVENT
   BEGIN:VEVENT
   ...
   END:VEVENT
   BEGIN:VEVENT
   ...
   DTSTART;TZID=US/Eastern:20120606T150000
   ...
   END:VEVENT
   END:VPOLL
   END:VCALENDAR
   </C:calendar-data>
         </D:prop>
         <D:status>HTTP/1.1 200 OK</D:status>
       </D:propstat>
     </D:response>
   </D:multistatus>]]></artwork>
          </figure>
        </t>
      </section>
    </section>
    
    <section anchor="caldav_time_range"
             title="CalDAV time ranges">
      <t>
        Section 9.9 "CALDAV:time-range XML Element" in <xref target='RFC4791'/>
        describes how to specify time ranges to limit the set of calendar
        components returned by the server. This specification extends
        <xref target='RFC4791'/> to describe the meaning of time ranges for 
        VPOLL
      </t>
      
      <t>
        A VPOLL component is said to overlap a given time range if the
        condition for the corresponding component state specified in the
        table below is satisfied.  The conditions depend on the presence
        of the DTSTART, DURATION, DTEND, and CREATED properties
        in the VPOLL component.  Note that, as specified above, the
        DTEND value MUST be a DATE-TIME value equal to or after the DTSTART
        value if specified.
        <figure>
          <artwork><![CDATA[
   +---------------------------------------------------------------+
   | VPOLL has the DTSTART property?                               |
   |   +-----------------------------------------------------------+
   |   |   VPOLL has the DURATION property?                        |
   |   |   +-------------------------------------------------------+
   |   |   | VPOLL has the DTEND property?                         |
   |   |   |   +---------------------------------------------------+
   |   |   |   | VPOLL has the CREATED property?                   |
   |   |   |   |   +-----------------------------------------------+
   |   |   |   |   | Condition to evaluate                         |
   +---+---+---+---+-----------------------------------------------+
   | Y | Y | N | * | (start  <= DTSTART+DURATION) AND              |
   |   |   |   |   | ((end   >  DTSTART) OR                        |
   |   |   |   |   |  (end   >= DTSTART+DURATION))                 |
   +---+---+---+---+-----------------------------------------------+
   | Y | N | Y | * | ((start <  DTEND)    OR  (start <= DTSTART))  |
   |   |   |   |   | AND                                           |
   |   |   |   |   | ((end   >  DTSTART)  OR  (end >= DTEND))      |
   +---+---+---+---+-----------------------------------------------+
   | Y | N | N | * | (start  <= DTSTART)  AND (end >  DTSTART)     |
   +---+---+---+---+-----------------------------------------------+
   | N | N | Y | * | (start  <  DTEND)    AND (end >= DTEND)       |
   +---+---+---+---+-----------------------------------------------+
   | N | N | N | Y | (start <= CREATED)   AND (end   >= CREATED)   |
   +---+---+---+---+-----------------------------------------------+
   | N | N | N | Y | (end    >  CREATED)                           |
   +---+---+---+---+-----------------------------------------------+
   | N | N | N | N | TRUE                                          |
   +---+---+---+---+-----------------------------------------------+          
]]></artwork>
          </figure>
        </t>
      </section>
      
      <section anchor="vpoll_freebusy"
               title="freebusy reports">
        <t>
         How do outstanding VPOLLs affect freebusy requests? Still an outstanding issue.
         Transparency is client controlled - server/client implementations may 
         provide defaults.  We previously ruled out TRANSP in VPOLL. Following
         are some notes.
        </t>
                
        <t>
          It seems appropriate to allow end-users to specify that they wish time 
          to be reserved when voting in favor of a given event.
        </t>
        
        <t>
          The default for VPOLL should be that all contained events are marked
          transparent - note the default for VEVENT is OPAQUE so should all
          contained VEVENTS have the TRANSP added when created?
        </t>
        
        <t>
          Should we create temporary related events to block time if the user 
          requests? Or just treat the VPOLL as a psuedo-collection and add it to 
          the freebusy set?
        </t>
      </section>
      
      <section anchor="vpoll_scheduling_issues"
               title="Scheduling Issues">
        <t>
          How does the user know that need to take action on a server generated CANCELLED, CLOSED, CONFIRMED? ITIP or notification collection? 
        </t>
        
        <t>
          Answer: it's iTip - it's in the inbox.
        </t>        
      </section>
    </section>

    <section anchor="Notes"
             title="Notes">
      <t>
        Various collected notes to be fitted in somewhere...
      </t>
      
      <t>
        <list style='numbers'>
          <t>
            What about POLL-WINNER?
            <figure>

              <artwork type="abnf">
        pollwinner = "POLL-WINNER" pollwinnerparams ":" text CRLF
        pollwinnerparams = *(";" other-param)
        ; Used with a STATUS:CONFIRMED VPOLL to indicate which 
        ; components have been confirmed
             </artwork>
            </figure>
          </t>
            
          <t>
            Need to add example of freebusy in response
            <figure>

              <artwork>
BEGIN:VCALENDAR
VERSION:2.0
PRODID:-//BedeworkCaldavTest//BedeworkCaldavTest
METHOD: REPLY
BEGIN:VPOLL
ORGANIZER:mailto:douglm@mysite.edu
VOTER:mailto:eric@example.com
UID:sched01-1234567890
DTSTAMP:20120101T010000Z
SEQUENCE:0
SUMMARY:What to do this week
BEGIN:VFREEBUSY
.......
END:VFREEBUSY
END:VPOLL
END:VCALENDAR
             </artwork>
            </figure>
          </t>
            
          <t>
            Need to talk about what a change in SEQUENCE means
            <vspace/>
            Sequence change forces a revote. 
            <vspace/>
            New voter - no sequence change
            <vspace/>
            Add another poll set or change poll item ids or any change to a child 
            component - bump sequence
            
          </t>
            
          <t>
            Then the VOTER property with a RESPONSE parameter can be in every 
            child component to show each voters current response
          </t>
            
          <t>
            Updates from the Organizer to change voter states go out using a new METHOD that only requires a minimal representation for child components and only includes changed VOTER states
          </t>
            
          <t>
            If the Organizer does send out a full update (METHOD:REQUEST), then 
            VOTER properties are included in the child components
          </t>
            
          <t>
            Need to describe the rules for POLL-MODE:BASIC
          </t>
            
          <t>
            Define LINK types - n
          </t>
            
          <t>
            Keep polls around after confirm or cancel. Use STATUS parameter 
            inside VPOLL with states: NEEDS-ACTION, CANCELLED, CLOSED, CONFIRMED. 
            Use POLL-ITEM-ID to identify the confirmed component.
          </t>
            
          <t>
            Confirm/cancel implies voting is closed.
          </t>
            
          <t>
            POLL-ITEM-ID  SHOULD be a unique ID. If it remains the same between 
            REQUESTs then the  previous response for that component MAY be re-used. 
            To force a re-vote on a component due to a significant change, the 
            POLL-ITEM-ID MUST change.
          </t>
            
          <t>
            A good client will remember the DTSTAMP of each VOTER and not allow 
            an older DTSTAMP to override a newer DTSTAMP.
          </t>
            
          <t>
            Fill out VOTER with the rest of the ATTENDEE properties 
            (SCHEDULE-STATUS, SCHEDULE-AGENT)
          </t>
            
          <t>
            VALARMs are allowed in VPOLL and represent a per-user alarm for the VPOLL itself (must be removed in iTIP messages). Need to describe what a relative alarm is relative to.
          </t>
            
          <t>
            Use STATUS to mark active, canceled, completed. Update DTEND with the end time
          </t>
            
          <t>
            Client updates their VOTER property as in the POLLSTATUS example.
          </t>
            
          <t>
            Winning Non-scheduled VEVENTs or VTODOs will get an ORGANIZER property and a list of non-participating ATTENDEEs
          </t>
            
          <t>
            Clients must preserve the responseparam value when there is no change from thre user even if they have a UI with fixed states (e.g. yes/no/maybe)
          </t>
            
          <t>
            LINK or URL in POLL-MODE?
          </t>
            
          <t>
            Use RELATED-TO in a icalendar component such as VEVENT or VTODO with 
            a new reltypeparam to specify the relationship to a VPOLL. May need 
            a reltypeparam for both an active and confirmed poll, or may only 
            need one reltypeparam. Need to pick a new reltypeparam name.
          </t>
            
          <t>
            Like POLL-PROPERTIES, but for a caldav server, a dav property that specify what 
            icalender properties this server supports for voting. 
          </t>
            
          <t>
Need to do a section on what Notifications to support.
            <vspace/>
        A. VPOLL is about to end and you haven't voted on it yet.
          </t>
            
          <t>
            Need to pick: SCHEDULED-AGENT=NONE or STATUS:DRAFT or a non-calendar 
            collection for drafts. Each one has it's pluses and minuses. 
          </t>
            
          <t>
            What to do with changes to STATUS:CONFIRMED? Allow them or not? 
            What do to that poll had a winning event or todo.
          </t>
            
          <t>
Need to write down what isn't vaild in a VPOLL.
            <vspace/>
    a. Can't change POLL-MODE

          </t>
            
          <t>
            Can a user create a poll with scheduled events where that user's 
            isn't the oranizer of the event? So is there a requirment that the 
            account that poll is on is able to create each one of the resources 
            in the poll? i.e. I can't create a poll with a set of events where 
            I am just the attendee of the events. Are there any other 
            restrictions for components in a VPOLL?
          </t>
            
          <t>
Add a dav property which will specify when a poll will expire and therfore be deleted from the server.
          </t>
            
          <t>
Guide for ATTENDEE roles chair, NON-PARTICIPANT etc
          </t>
            
          <t>
Shared Calendars
            <vspace/>
    Only voters (or delegates) can manipulate votes.    
          </t>
        </list>
      </t>
    </section>
      
    <section title='Security Considerations'>
      <t>
       Applications using these property need to be aware of the risks 
       entailed in using the URIs provided as values. See [RFC3986] for 
       a discussion of the security considerations relating to URIs. 
      </t>
    </section>

    <section anchor="iana_considerations" title='IANA Considerations'>
      <section anchor="parameter_registrations"
               title="Parameter Registrations" >
        <t>
          This document defines the following new iCalendar property parameters
          to be added to the registry defined in Section 8.2.4 of <xref target='RFC5545'/>:
        </t>
        <texttable>
          <ttcol align="left">Property Parameter</ttcol>
          <ttcol align="left">Status</ttcol>
          <ttcol align="left">Reference</ttcol>

          <c>PUBLIC-COMMENT</c>
          <c>Current</c>
          <c>RFCXXXX, <xref target="parameter_public_comment"/></c>

          <c>RESPONSE</c>
          <c>Current</c>
          <c>RFCXXXX, <xref target="parameter_response"/></c>

          <c>STAY-INFORMED</c>
          <c>Current</c>
          <c>RFCXXXX, <xref target="parameter_stayinformed"/></c>
        </texttable>
      </section>
      
      <section anchor="property_registrations"
               title="Property Registrations" >
        <t>
          This document defines the following new iCalendar properties to be
          added to the registry defined in Section 8.2.3 of <xref target='RFC5545'/>:
        </t>
        <texttable>
          <ttcol align="left">Property</ttcol>
          <ttcol align="left">Status</ttcol>
          <ttcol align="left">Reference</ttcol>

          <c>ACCEPT-RESPONSE</c>
          <c>Current</c>
          <c>RFCXXXX, <xref target="accept_response"/></c>

          <c>POLL-ITEM-ID</c>
          <c>Current</c>
          <c>RFCXXXX, <xref target="poll_item_id"/></c>

          <c>POLL-MODE</c>
          <c>Current</c>
          <c>RFCXXXX, <xref target="poll_mode"/></c>

          <c>VOTER</c>
          <c>Current</c>
          <c>RFCXXXX, <xref target="voter"/></c>
        </texttable>
      </section>
    </section>

    <section title="Acknowledgements">
      <t>
        The authors would like to thank the members of the Calendaring and
        Scheduling Consortium Freebusy technical committee and the following
        individuals for contributing their ideas and support:
      </t>
      <t>
        ...
      </t>
      <t>
        The authors would also like to thank the Calendaring and
        Scheduling Consortium for advice with this specification.
      </t>
    </section>
  </middle>

  <!--  *****BACK MATTER ***** -->

  <back>
    <!-- References split into informative and normative -->

    <!-- There are 2 ways to insert reference entries from the citation libraries:
     1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
     2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
        (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

     Both are cited textually in the same manner: by using xref elements.
     If you use the PI option, xml2rfc will, by default, try to find included files in the same
     directory as the including file. You can also define the XML_LIBRARY environment variable
     with a value containing a set of directories to search.  These can be either in the local
     filing system or remote ones accessed by http (http://domain/dir/... ).-->

    <references title="Normative References">
      &RFC2119;
      &RFC2434;
      &RFC2518;
      &RFC3688;
      &RFC3986;
      &RFC4589;
      &RFC4791;
      &RFC5545;
      &RFC5546;
      &RFC6047;
      &W3C.REC-xml-20060816;
      &I-D.daboo-icalendar-extensions;
    </references>

    <section title="Open issues">
      <t>
        <list style='hanging'>
          <t hangText="Issue 1:" >
            What's the issue with that?
          </t>
        </list>
      </t>
    </section>
    
    <section title="Change log">
      <t>
        2012-11-02  MD Initial version
      </t>
    </section>
  </back>
</rfc>
